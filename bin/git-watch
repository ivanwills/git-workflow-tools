#!/usr/bin/perl

# Created on: 2014-03-11 20:58:59
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage ();
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use Git::Workflow qw/branches sha_from_show/;

our $VERSION = 0.3;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    sleep   => 60,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);
my %actions = (
    show => 1,
    do   => 1,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'all|a',
        'branch|b=s',
        'fetch|F',
        'file|f=s',
        'once|1',
        'quiet|q',
        'remote|r=s',
        'sleep|s=i',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or Pod::Usage::pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        Pod::Usage::pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        Pod::Usage::pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $action = $actions{$ARGV[0]} ? shift @ARGV : 'do';
    my $once   = $option{once}      ? -1          : 1;
    my $last;

    while ($once) {
        my $id = git_state();

        if ( !$last || $last ne $id ) {
            $once++;
            my $changes = sha_from_show($id, branches => 1, files => 1 );

            if ( found($changes) ) {
                if ( $action eq 'show' ) {
                    print "$id\n";

                    if ( !$option{quiet} ) {
                        my $join = $option{verbose} ? "\n    " : '';
                        print "  Branches: ";
                        print $join, join +($join || ', '), keys %{ $changes->{branches} };
                        print "\n";
                        print "  Files:    ";
                        print $join, join +($join || ', '), keys %{ $changes->{files} };
                        print "\n\n";
                    }
                }
                else {
                    $ENV{WATCH_FILES}    = join ',', keys %{ $changes->{files} };
                    $ENV{WATCH_BRANCHES} = join ',', keys %{ $changes->{branches} };
                    system @ARGV;
                }
            }
        }

        $last = $id;
        sleep $option{sleep};
    }

    return;
}

sub git_state {
    my $id;

    if ( $option{all} || $option{remote} ) {
        `git fetch 2>/dev/null`;
        my $out = `git reflog --all`;
        ($id) = $out =~ /^([0-9a-f]+)\s/;
    }
    else {
        `git fetch 2>/dev/null` if $option{fetch};
        my $out = `git show`;
        ($id) = $out =~ /commit\s+([0-9a-f]+)/
    }

    return $id;
}

sub found {
    my ($changes) = @_;

    if ($option{file}) {
        return 1 if grep {/$option{file}/} keys %{ $changes->{files} };
    }

    if ($option{branch}) {
        return 1 if grep {/$option{branch}/} keys %{ $changes->{branches} };
    }

    return !$option{file} && !$option{branch};
}

__DATA__

=head1 NAME

git-watch - Watch for changes in repository up-stream

=head1 VERSION

This documentation refers to git-watch version 0.3

=head1 SYNOPSIS

   git-watch show [-1|--once] [(-f|--file) file ...]
   git-watch [do] [-1|--once] [(-f|--file) file ...] [--] cmd

 SUB-COMMAND
  show          Simply show when a file
  do            Execute a shell script cmd when a change occurs

 OPTIONS:
  -1 --once     Run once then exit
  -f --file[=]regex
                Watch file any files changing that match "regex"
  -b --branch[=]regex
                Watch for any changes to branches matching "regex"
                by default looks only at local branches
  -r --remote   With --branch only look at remote branches
  -a --all      With --branch look at all branches (local and remote)
  -s --sleep[=]int
                Sleep time between fetches (devault 60s)
  -q --quiet    Suppress notifying of files changed

  -v --verbose  Show more detailed option
     --VERSION  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for git-watch

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2014 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
