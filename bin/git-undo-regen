#!/usr/bin/perl

# Created on: 2014-02-18 14:49:48
# Create by:  dev
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage ();
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Git::Workflow;
use lib "$ENV{HOME}/src/VCS-Which/lib";

our $VERSION = 0.1;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    config  => '.regen-files',
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'config|c=s',
        'ours|o',
        'theirs|t',
        'test|t!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or Pod::Usage::pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        Pod::Usage::pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        Pod::Usage::pod2usage( -verbose => 1 );
    }
    elsif ( !-s $option{config} ) {
        warn "The config file $option{config} is missing!\n";
        Pod::Usage::pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $regen = regen();
    my $merge = $option{theirs} && !$option{ours} ? '--theirs' : '--ours';

    FILE:
    for my $file ( keys %$regen ) {
        chomp $file;
        my $status = `git status $file`;
        my (undef, $merge, $name) = split /\n?[#]\s+(both\s+)?modified:\s+/, $status;

        if ($name) {
            if ( $option{test} ) {
                warn "git checkout $file\n";
                next FILE;
            }
            system qw/git checkout/, $file, $merge ? ($merge) : ();
            system qw/git add/, $file if $merge;
        }
    }

    return;
}

sub regen {
    my @regen = map {/^(.*)$/} Git::Workflow::slurp( $option{config} );
    my %regen;

    while (my $regen = shift @regen) {
        if ( -f $regen ) {
            $regen{$regen} = 1;
        }
        elsif ( -d $regen ) {
            push @regen, Git::Workflow::children($regen);
        }
        else {
            push @regen, glob $regen;
        }
    }

    return \%regen;
}

__DATA__

=head1 NAME

git-undo-regen - Undo changes from a regen

=head1 VERSION

This documentation refers to git-undo-regen version 0.1

=head1 SYNOPSIS

   git-undo-regen [option]

 OPTIONS:
  -c --config[=]file
                File containing names of files to checkout (Default .regen-file)
     --ours     Do a git checkout --ours in a merge (default in a merge)
     --theirs   Do a git checkout --theirs in a merge
  -t --test     Don't actually checkout just show what would be checked out

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for git-undo-regen



=head1 DESCRIPTION

Checkout any file found in C<--config> (default .regen-files), one line per file or glob.

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2014 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
